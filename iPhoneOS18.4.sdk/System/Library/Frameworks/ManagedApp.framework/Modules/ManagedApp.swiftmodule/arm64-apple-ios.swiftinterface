// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1 effective-5.10 (swiftlang-6.1.0.110.5 clang-1700.0.13.3)
// swift-module-flags: -target arm64-apple-ios18.4 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -library-level api -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -user-module-version 20.4.18 -module-name ManagedApp
// swift-module-flags-ignorable:  -interface-compiler-version 6.1
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@available(iOS 18.4, visionOS 2.4, *)
public enum ManagedAppError : Swift.Error, Foundation.LocalizedError {
  case invalidIdentifier
  case serverError
  case internalError
  public static func == (a: ManagedApp.ManagedAppError, b: ManagedApp.ManagedAppError) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@available(iOS 18.4, visionOS 2.4, *)
public class ManagedAppConfigurationProvider {
  public init()
  public func configurations<Configuration>(_ t: Configuration.Type) async -> some _Concurrency.AsyncSequence<Swift.Optional<Configuration>, Swift.Never> where Configuration : Swift.Decodable
  
  @objc deinit
}
@available(iOS 18.4, visionOS 2.4, *)
public protocol ManagedAppConfigurationDecodingError : Swift.Decodable, Swift.Encodable, Swift.Error {
  var code: ManagedApp.ManagedAppConfigurationDecodingErrorCode { get set }
  var message: Swift.String { get set }
}
@available(iOS 18.4, visionOS 2.4, *)
public struct ManagedAppConfigurationDecodingErrorCode : Swift.RawRepresentable, Swift.Hashable, Swift.Codable, Swift.Sendable {
  public let rawValue: Swift.Int
  public init?(rawValue: Swift.Int)
  public static let firstReserved: Swift.Int
  public static let generic: Swift.Int
  public static let dataCorrupted: Swift.Int
  public static let keyNotFound: Swift.Int
  public static let typeMismatch: Swift.Int
  public static let valueNotFound: Swift.Int
  public static let timeout: Swift.Int
  @available(iOS 18.4, visionOS 2.4, *)
  public typealias RawValue = Swift.Int
}
@available(iOS 18.4, visionOS 2.4, *)
public class ManagedAppPasswordsProvider {
  public init()
  public var identifiers: some _Concurrency.AsyncSequence<Swift.Array<Swift.String>, Swift.Never> {
    get async
  }
  public func password(withIdentifier identifier: Swift.String) async throws(ManagedApp.ManagedAppError) -> Swift.String
  @objc deinit
}
@available(iOS 18.4, visionOS 2.4, *)
public class ManagedAppCertificatesProvider {
  public init()
  public var identifiers: some _Concurrency.AsyncSequence<Swift.Array<Swift.String>, Swift.Never> {
    get async
  }
  public func certificate(withIdentifier identifier: Swift.String) async throws(ManagedApp.ManagedAppError) -> Security.SecCertificate
  @objc deinit
}
@available(iOS 18.4, visionOS 2.4, *)
public class ManagedAppIdentitiesProvider {
  public init()
  public var identifiers: some _Concurrency.AsyncSequence<Swift.Array<Swift.String>, Swift.Never> {
    get async
  }
  public func identity(withIdentifier identifier: Swift.String) async throws(ManagedApp.ManagedAppError) -> Security.SecIdentity
  @objc deinit
}
@available(iOS 18.4, visionOS 2.4, *)
extension ManagedApp.ManagedAppError : Swift.Equatable {}
@available(iOS 18.4, visionOS 2.4, *)
extension ManagedApp.ManagedAppError : Swift.Hashable {}
